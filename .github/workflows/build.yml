name: CI
on:
  pull_request: {}
  push: { branches: [development] }
  
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE2 }}

jobs:   
  CI:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2020.1.4f1
        testMode:
         # - playmode
          - editmode
    steps:            
      # Request manual activation file
      - name: Unity - Request Activation File
        id: getManualLicenseFile
        uses: game-ci/unity-request-activation-file@v2.0-alpha-1
        with:
          unityVersion: 2020.1.4f1

      - name: Unity - Activate
        uses: game-ci/unity-activate@v1.3

      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}
      
      # Checkout    
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library
          restore-keys: |
            Library

      # Test
      - name: Run tests
        uses: game-ci/unity-test-runner@v2.0-alpha-2
        id: tests
        with:
          unityVersion: ${{ matrix.unityVersion }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE2 }}

      # Build
      #- name: Build project
      #  uses: webbertakken/unity-builder@v0.10
      #  with:
      #    unityVersion: 2020.1.4f1
      #    targetPlatform: StandaloneWindows64
  
      # Test Results
      - uses: actions/upload-artifact@v1
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
  
      #- name: SonarQube analysis
      #  if: always()
      #  uses: MirrorNG/unity-runner@3.0.0
      #  with:
      #    entrypoint: /sonar-scanner.sh
      #    projectKey: AoTTG-2_AoTTG-2
      #    projectName: AoTTG-2
      #    sonarOrganisation: aottg-2
      #    beginArguments: /d:sonar.verbose="true"
      #  env:
      #    FrameworkPathOverride: /opt/Unity/Editor/Data/MonoBleedingEdge/
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #    GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

#  Release:
#    runs-on: ubuntu-latest
#    needs: CI
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
  
#      - name: Release
#        uses: cycjimmy/semantic-release-action@v2
#        with:
#          extra_plugins: |
#            @semantic-release/exec
#            @semantic-release/changelog
#            @semantic-release/git
#          branch: development
#        env:
#          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
