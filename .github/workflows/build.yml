name: Actions üòé

on:
  pull_request: {}
  push: { branches: [development] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE2 }}
  UNITY_VERSION: 2020.1.17f1

jobs:
  testRunnerInEditMode:
    if: false
    name: Test in editmode üìù
    runs-on: ubuntu-latest
    steps:
      # Checkout repository (required to test local actions)
      - uses: actions/checkout@v2
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-
      # Configure test runner
      - uses: game-ci/unity-test-runner@v2.0-alpha-2
        id: testRunner
        with:
          testMode: editmode
          unityVersion: ${{ env.UNITY_VERSION }}
          useNetworkHost: true
          customParameters: |
            -nographics
      # Upload artifact
      - uses: actions/upload-artifact@v1
        with:
          name: Test results (edit mode)
          path: ${{ steps.testRunner.outputs.artifactsPath }}
          
  testRunnerInPlayMode:
    if: false
    name: Test in playmode üìù
    runs-on: ubuntu-latest
    steps:
      # Checkout repository (required to test local actions)
      - uses: actions/checkout@v2
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-
      # Configure test runner
      - uses: game-ci/unity-test-runner@v2.0-alpha-2
        id: testRunner
        with:
          testMode: playmode
          unityVersion: ${{ env.UNITY_VERSION }}
          useNetworkHost: true
      # Upload artifact
      - uses: actions/upload-artifact@v1
        with:
          name: Test results (edit mode)
          path: ${{ steps.testRunner.outputs.artifactsPath }}
 
  buildWindows:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
    steps:     
      # Checkout
      - uses: actions/checkout@v2
        with:
          lfs: true
          
      # Cache
      - uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library
          restore-keys: |
            Library
          
      # Build
      - uses: game-ci/unity-builder@v2.0-alpha-6
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}
          
      # This will automatically deploy the Builds
      #- uses: actions/upload-artifact@v1
      #  with:
      #    name: Build
      #    path: build
 
  buildOtherPlatforms:
    if: false
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          #- StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
    steps:     
      # Checkout
      - uses: actions/checkout@v2
        with:
          lfs: true
          
      # Cache
      - uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library
          restore-keys: |
            Library
          
      # Build
      - uses: game-ci/unity-builder@v2.0-alpha-6
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}
          
      # This will automatically deploy the Builds
      #- uses: actions/upload-artifact@v1
      #  with:
      #    name: Build
      #    path: build

  sonarCloud:
    needs: buildWindows
    name: Build for Windows64 with SonarQube
    if: always()
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library
                  
      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "/opt/unity/Editor/Data/Managed/UnityEngine"
          replace: "/github/workspace/Library/PlayerDataCache/Win64/Data/Managed"
          include: "**.csproj"
          exclude: "Library"
      
      - name: SonarQube analysis
        if: always()
        uses: MirrorNG/unity-runner@3.1.0
        with:
          entrypoint: /sonar-scanner.sh
          projectKey: AoTTG-2_AoTTG-2
          projectName: AoTTG-2
          sonarOrganisation: aottg-2
          solution: AoTTG-2.sln
          beginArguments: /d:sonar.verbose="true"
        env:
          FrameworkPathOverride: /opt/Unity/Editor/Data/MonoBleedingEdge/
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
